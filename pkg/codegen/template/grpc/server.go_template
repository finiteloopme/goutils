package internal

import (
	"context"

	{{ .Api.Name}}{{ .Api.Version}} "{{ .FullyQualifiedModuleName}}/{{ .Api.Parentfolder}}/{{ .Api.CodeGenLocation}}/{{ .Api.Name}}/{{ .Api.Version}}"
	grpcUtil "github.com/finiteloopme/goutils/pkg/grpc"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
)

// todo: Fix hardcoding of Hello in this File
type MyHelloService struct {
	// todo: fix hardcoding
	{{ .Api.Name}}{{ .Api.Version}}.UnimplementedHelloServiceServer
	grpcUtil.UnimplementedGRPCServer
	grpcUtil.UnimplementedGRPCWithHTTPHandler
}

func (helloService MyHelloService) Register(server *grpc.Server) {
	{{ .Api.Name}}{{ .Api.Version}}.RegisterHelloServiceServer(server, &MyHelloService{})
}

func (helloServivce MyHelloService) RegisterHTTPHandler(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	return {{ .Api.Name}}{{ .Api.Version}}.RegisterHelloServiceHandlerFromEndpoint(ctx, mux, endpoint, opts)
}

// TODO: Service logic should be implemented here
func (helloService MyHelloService) SayHello(ctx context.Context, req *{{ .Api.Name}}{{ .Api.Version}}.SayHelloRequest) (*{{ .Api.Name}}{{ .Api.Version}}.SayHelloResponse, error) {
	greeting := "Hello, "
	resp := &{{ .Api.Name}}{{ .Api.Version}}.SayHelloResponse{Msg: []byte(greeting + "World")}
	if req.User != nil && req.User.FirstName != "" {
		name := req.User.FirstName
		if req.User.LastName != "" {
			name = name + " " + req.User.LastName
		}
		resp.Msg = []byte(greeting + name)
	}


	return resp, nil
}

// Start the gRPC service
func RunServer() error {

	var {{ .Api.Name}}Service MyHelloService
	grpcUtil.RunGRPC({{ .Api.Name}}Service)
	return nil
}

// Start the gRPC Service and a corresponding HTTP/REST handler
func RunWithHTTPHandler() error {
	var userService MyHelloService

	return grpcUtil.RunGRPCAndREST(userService)
}
